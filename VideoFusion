#!/bin/bash

# VideoFusion - Silent background video merger
# Runs without Terminal window, uses macOS notifications

# Check if ffmpeg exists
if ! command -v ffmpeg &> /dev/null; then
    osascript -e 'display notification "ffmpeg not found. Install with: brew install ffmpeg" with title "VideoFusion Error"' &>/dev/null
    exit 1
fi

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Show starting notification
osascript -e 'display notification "Scanning for video files..." with title "VideoFusion" subtitle "Starting merge process"' &>/dev/null

# Find all video files (excluding output.mp4)
VIDEO_FILES=()
while IFS= read -r -d '' file; do
    if [[ "$(basename "$file")" != "output.mp4" ]]; then
        VIDEO_FILES+=("$file")
    fi
done < <(find . -maxdepth 1 -name "*.mp4" -type f -print0)

# Also check for other video formats, including TS
for ext in mov avi mkv wmv flv webm m4v ts MOV AVI MKV WMV FLV WEBM M4V TS; do
    while IFS= read -r -d '' file; do
        basename_file="$(basename "$file")"
        if [[ "$basename_file" != "output.mp4" ]]; then
            VIDEO_FILES+=("$file")
        fi
    done < <(find . -maxdepth 1 -name "*.$ext" -type f -print0 2>/dev/null)
done

if [ ${#VIDEO_FILES[@]} -eq 0 ]; then
    osascript -e 'display notification "No video files found in current directory" with title "VideoFusion Error"' &>/dev/null
    exit 1
fi

# Show files found notification
osascript -e "display notification \"Found ${#VIDEO_FILES[@]} video files to merge\" with title \"VideoFusion\" subtitle \"Processing...\"" &>/dev/null

# Check if output.mp4 already exists
if [ -f "output.mp4" ]; then
    RESPONSE=$(osascript -e 'display dialog "output.mp4 already exists. Do you want to overwrite it?" buttons {"Cancel", "Overwrite"} default button "Overwrite" with title "VideoFusion"' 2>/dev/null)
    if [[ "$RESPONSE" != *"Overwrite"* ]]; then
        osascript -e 'display notification "Operation cancelled by user" with title "VideoFusion"' &>/dev/null
        exit 1
    fi
    rm -f "output.mp4"
fi

# Create file list for ffmpeg
TEMP_LIST=$(mktemp)
for file in "${VIDEO_FILES[@]}"; do
    abs_path="$(realpath "$file")"
    echo "file '$abs_path'" >> "$TEMP_LIST"
done

# Try fast concat first (works for same format files)
if ffmpeg -f concat -safe 0 -i "$TEMP_LIST" -c copy "output.mp4" -y -v error -nostats &>/dev/null; then
    # Success with fast merge
    rm -f "$TEMP_LIST"
    if [ -f "output.mp4" ] && [ -s "output.mp4" ]; then
        FILE_SIZE=$(ls -lh "output.mp4" | awk '{print $5}')
        DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "output.mp4" 2>/dev/null)
        if [[ -n "$DURATION" ]]; then
            MINUTES=$((${DURATION%.*} / 60))
            SECONDS=$((${DURATION%.*} % 60))
            osascript -e "display notification \"Fast merge successful! Size: $FILE_SIZE, Duration: ${MINUTES}m ${SECONDS}s\" with title \"VideoFusion Complete\" subtitle \"output.mp4 created\"" &>/dev/null
        else
            osascript -e "display notification \"Fast merge successful! Size: $FILE_SIZE\" with title \"VideoFusion Complete\" subtitle \"output.mp4 created\"" &>/dev/null
        fi
    fi
else
    # Fallback to re-encoding
    osascript -e 'display notification "Fast merge failed, trying re-encoding..." with title "VideoFusion" subtitle "This may take longer"' &>/dev/null
    if ffmpeg -f concat -safe 0 -i "$TEMP_LIST" -c:v libx264 -c:a aac "output.mp4" -y -v error -nostats &>/dev/null; then
        rm -f "$TEMP_LIST"
        if [ -f "output.mp4" ] && [ -s "output.mp4" ]; then
            FILE_SIZE=$(ls -lh "output.mp4" | awk '{print $5}')
            DURATION=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "output.mp4" 2>/dev/null)
            if [[ -n "$DURATION" ]]; then
                MINUTES=$((${DURATION%.*} / 60))
                SECONDS=$((${DURATION%.*} % 60))
                osascript -e "display notification \"Re-encoding merge successful! Size: $FILE_SIZE, Duration: ${MINUTES}m ${SECONDS}s\" with title \"VideoFusion Complete\" subtitle \"output.mp4 created\"" &>/dev/null
            else
                osascript -e "display notification \"Re-encoding merge successful! Size: $FILE_SIZE\" with title \"VideoFusion Complete\" subtitle \"output.mp4 created\"" &>/dev/null
            fi
        fi
    else
        rm -f "$TEMP_LIST"
        osascript -e 'display notification "Failed to create output.mp4" with title "VideoFusion Error" subtitle "Both merge methods failed"' &>/dev/null
        exit 1
    fi
fi
